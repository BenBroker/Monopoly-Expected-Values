{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10257650,"sourceType":"datasetVersion","datasetId":6345400}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-20T19:44:21.231221Z","iopub.execute_input":"2024-12-20T19:44:21.231608Z","iopub.status.idle":"2024-12-20T19:44:21.235929Z","shell.execute_reply.started":"2024-12-20T19:44:21.231579Z","shell.execute_reply":"2024-12-20T19:44:21.234628Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"game_values = pd.read_csv(\"/kaggle/input/monopoly-game-values/monopolygame.csv\")\ngame_values.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-20T19:52:02.365101Z","iopub.execute_input":"2024-12-20T19:52:02.365457Z","iopub.status.idle":"2024-12-20T19:52:02.405802Z","shell.execute_reply.started":"2024-12-20T19:52:02.365429Z","shell.execute_reply":"2024-12-20T19:52:02.404711Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Function to compute the optimal houses and value\ndef calculate_optimal_value(row):\n    if row[\"type\"] != \"street\" or pd.isna(row[\"house_price\"]):\n        # Non-street properties or properties without house prices\n        return pd.Series({\"optimal_houses\": 0, \"optimal_value\": row[\"rent_0\"] or 0})\n    \n    # Calculate ROI for each house count\n    rents = [row[f\"rent_{i}\"] for i in range(5)] + [row[\"rent_hotel\"]]\n    costs = [row[\"cost\"] + i * row[\"house_price\"] for i in range(6)]\n    rois = [rent / cost if rent is not None else -np.inf for rent, cost in zip(rents, costs)]\n    \n    # Find optimal houses\n    optimal_houses = np.argmax(rois)\n    optimal_value = rents[optimal_houses]\n    \n    return pd.Series({\"optimal_houses\": optimal_houses, \"optimal_value\": optimal_value})\n\n# Apply the function\ngame_values[[\"optimal_houses\", \"optimal_value\"]] = game_values.apply(calculate_optimal_value, axis=1)\n\n# Display the results\nprint(game_values[[\"name\", \"optimal_houses\", \"optimal_value\"]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-20T19:57:31.250990Z","iopub.execute_input":"2024-12-20T19:57:31.251369Z","iopub.status.idle":"2024-12-20T19:57:31.283508Z","shell.execute_reply.started":"2024-12-20T19:57:31.251336Z","shell.execute_reply":"2024-12-20T19:57:31.282095Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Function to calculate property value\ndef calculate_property_value(row):\n    # Assign the number of houses based on results above\n    if row['color'] == \"darkgreen\":\n        houses = 3  # Green properties\n    elif row['name'] == \"Park Place\":\n        houses = 4  # Park Place\n    else:\n        houses = 5  # All other properties\n\n    # Determine the rent for the property based on the number of houses\n    if houses == 3:\n        rent = row['rent_3']  # Rent with 3 houses\n    elif houses == 4:\n        rent = row['rent_4']  # Rent with 4 houses\n    else:\n        rent = row['rent_hotel']  # Rent with 5 houses\n\n    # Calculate the cost (initial cost + houses * house cost)\n    cost = row['cost'] + (houses * row['house_price'])\n\n    # Calculate the property value (Rent - Cost)\n    value = rent - cost\n    return value\n\n# Apply the function to each row in the dataset\ngame_values['value'] = game_values.apply(calculate_property_value, axis=1)\n\n# Display the properties with their calculated values\nprint(game_values[['name', 'color', 'value']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-20T20:40:08.143457Z","iopub.execute_input":"2024-12-20T20:40:08.143878Z","iopub.status.idle":"2024-12-20T20:40:08.156335Z","shell.execute_reply.started":"2024-12-20T20:40:08.143849Z","shell.execute_reply":"2024-12-20T20:40:08.155149Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def values_with_prob(row):\n    ","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}